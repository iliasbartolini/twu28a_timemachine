apply plugin: 'java'
apply plugin: 'jetty'
apply plugin: 'idea'
apply plugin: 'war'
apply from:'emma.gradle'
ant.importBuild 'build.xml'

import org.apache.tools.ant.filters.*
import java.sql.Driver

ext
{
   hibernateConfigTemplate = file("$projectDir/src/main/resources/hibernate.cfg.xml.template")
   webXmlTemplate = file("$webAppDir/WEB-INF/web.xml.template")
   generatedWebXmlFile = file("$webAppDir/WEB-INF/web.xml")
   serverPort = 9093
   environment = rootProject.hasProperty("environment") ? environment : "DEV"

}
repositories {
    mavenCentral()
    flatDir name: 'localRepository', dirs: 'lib'
}

configurations {
    driver
}

dependencies {
    compile 'org.mybatis:mybatis:3.1.1',
            'org.mybatis:mybatis-spring:1.1.1',
            'javax.servlet:servlet-api:2.5',
            'org.springframework:spring-core:3.1.1.RELEASE',
            'org.springframework:spring-webmvc:3.1.1.RELEASE',
            'org.springframework:spring-web:3.1.1.RELEASE',
            'org.springframework:spring-jdbc:3.1.2.RELEASE',
            'commons-dbcp:commons-dbcp:1.4',
            'org.apache.ant:ant:1.8.4',
            'org.springframework:spring-orm:3.1.0.RELEASE',
            'com.h2database:h2:1.3.167',
            'org.freemarker:freemarker:2.3.19',
            'ch.qos.logback:logback-classic:1.0.0',
            'commons-lang:commons-lang:2.6',
            'hsqldb:hsqldb:1.8.0.10',
            'org.codehaus.jackson:jackson-core-lgpl:1.9.9',
            'org.codehaus.jackson:jackson-mapper-lgpl:1.9.9',
            'org.json:json:20090211',
            fileTree(dir: 'lib', include: '*.jar'),
            group: 'org.hibernate', name: 'hibernate-core', version: '4.+',
            'org.codehaus.groovy:groovy-all:2.0.1',
            'cglib:cglib-nodep:2.2'

            testCompile 'junit:junit:4.10',
            'org.springframework:spring-test:3.1.1.RELEASE',
            'org.mockito:mockito-all:1.9.0',
            'org.testng:testng:6.1.1',
            'org.seleniumhq.selenium:selenium-java:2.23.0',
            'org.seleniumhq.selenium:selenium-firefox-driver:2.23.0',
            'org.hamcrest:hamcrest-core:1.1'

    emma "emma:emma:2.0.5312"
    emma "emma:emma_ant:2.0.5312"

    driver name: 'ojdbc14'
}


war {
        destinationDir = file("$projectDir/build/libs/")
        archiveName = 'timemachine-' + environment + '.war'
        outputs.dir destinationDir
}



task createWebXML(dependsOn:"classes"){
    def engine = new groovy.text.SimpleTemplateEngine()

    ext.set("casLogin", "https://castest.thoughtworks.com/cas/login")
    ext.set("casServer", "https://castest.thoughtworks.com/cas")

    ext.serverName= InetAddress.getLocalHost().getHostName()
    if(rootProject.hasProperty("hostName"))
        ext.serverName = rootProject.getAt("hostName")

    file(generatedWebXmlFile).withWriter { w ->
        w << engine.createTemplate(webXmlTemplate).make(serverName: serverName, serverPort: serverPort, casLogin: casLogin, casServer:casServer).toString()
    }
}


jettyRun
{
    httpPort= serverPort
    contextPath = 'timemachine'
    webXml= generatedWebXmlFile
}

test {
    exclude '**/functional/com/thoughtworks/**/*.*'
}

task jasmineTest(type: Exec) {
    workingDir "src/test/javascript"
    commandLine = ["phantomjs", "lib/phantom-jasmine/run_jasmine_test.coffee", "SpecRunner.html"]
}

task functionalTest(type: Test, dependsOn: ["test", "jasmineTest"]) {
    include '**/functional/com/thoughtworks/**/*.*'
}

functionalTest.doFirst {
    jettyRun.daemon = true
    jettyRun.execute()
}


processResources.doFirst {
    println environment

    Properties props = new Properties()
    props.load(new FileInputStream("$projectDir/properties/" + environment + ".properties"))
    def engine = new groovy.text.SimpleTemplateEngine()
    file("$projectDir/src/main/resources/hibernate.cfg.xml").withWriter { w ->
        w << engine.createTemplate(hibernateConfigTemplate).make(props).toString()
    }

    println "Hibernate configuration file generated"

    file(generatedWebXmlFile).withWriter { w ->
        w << engine.createTemplate(webXmlTemplate).make(props).toString()
        filter(ReplaceTokens, tokens: props)
    }

}


[jettyRunWar, jettyStop]*.stopPort = 8081
[jettyRunWar, jettyStop]*.stopKey = 'stopKey'

functionalTest.doLast {
    jettyStop.execute()
}


//task deployDB2 << {
////    ant.taskdef(resource: 'PRODUCTION.properties') {
////        classpath {
////            fileset(dir: 'libs', includes: '*.jar')
////        }
////    }
//    ant.deployDB3(){
//        fileset(dir: 'src') {
//            include(name: 'build.xml')
//            exclude(name: '**.java')
//        }
//    }
//}
task deployDB(dependsOn: deployDB3) << {
//    println 'Hello, from Gradle'
}
