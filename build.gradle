apply plugin: 'java'
apply plugin: 'jetty'
apply plugin: 'idea'
apply plugin: 'war'
apply from:'emma.gradle'

ext
{
   webXmlTemplate = file("$webAppDir/WEB-INF/web.xml.template")
   generatedWebXmlFile = file("$buildDir/web.xml")
   serverPort = 9093
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.mybatis:mybatis:3.1.1',
            'org.mybatis:mybatis-spring:1.1.1',
            'javax.servlet:servlet-api:2.5',
            'org.springframework:spring-core:3.1.1.RELEASE',
            'org.springframework:spring-webmvc:3.1.1.RELEASE',
            'org.springframework:spring-web:3.1.1.RELEASE',
            'org.springframework:spring-jdbc:3.1.2.RELEASE',
            'commons-dbcp:commons-dbcp:1.4',
            'org.springframework:spring-orm:3.1.0.RELEASE',
            'com.h2database:h2:1.3.167',
            'org.freemarker:freemarker:2.3.19',
            'ch.qos.logback:logback-classic:1.0.0',
            'commons-lang:commons-lang:2.6',
            'hsqldb:hsqldb:1.8.0.10',
            'org.codehaus.jackson:jackson-core-lgpl:1.9.9',
            'org.codehaus.jackson:jackson-mapper-lgpl:1.9.9',
            'org.json:json:20090211',
            fileTree(dir: 'lib', include: '*.jar'),
            group: 'org.hibernate', name: 'hibernate-core', version: '4.+',
            'org.codehaus.groovy:groovy-all:2.0.1'



            testCompile 'junit:junit:4.10',
            'org.springframework:spring-test:3.1.1.RELEASE',
            'org.mockito:mockito-all:1.9.0',
            'org.testng:testng:6.1.1',
            'org.seleniumhq.selenium:selenium-java:2.23.0',
            'org.seleniumhq.selenium:selenium-firefox-driver:2.23.0'

    emma "emma:emma:2.0.5312"
    emma "emma:emma_ant:2.0.5312"
}
task createWebXML(dependsOn:"classes"){
    def engine = new groovy.text.SimpleTemplateEngine()
    ext.serverName= InetAddress.getLocalHost().getHostName()
    if(rootProject.hasProperty("hostName"))
        ext.serverName = rootProject.getAt("hostName")
    file("$webAppDir/WEB-INF/web.xml").withWriter { w ->
        w << engine.createTemplate(webXmlTemplate).make([servername: serverName, serverPort: serverPort]).toString()
    }
 }
jettyRun
{
    httpPort= serverPort
    contextPath = 'timemachine'
    webXml= generatedWebXmlFile
}

test {
    exclude '**/functional/com/thoughtworks/**/*.*'
}

task functionalTest(type: Test, dependsOn: "test") {
    include '**/functional/com/thoughtworks/**/*.*'
}

functionalTest.doFirst {
    jettyRun.daemon = true
    jettyRun.execute()
}

[jettyRunWar, jettyStop]*.stopPort = 8081
[jettyRunWar, jettyStop]*.stopKey = 'stopKey'

functionalTest.doLast {
    jettyStop.execute()
}
